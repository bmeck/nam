#! /usr/bin/env node

//
// NodeApplicationManager $OPTIONS < $CMD[] | NodeApplicationManager $OPTIONS $CMD
// $OPTIONS
// --cwd|-C path
// --integrate|-i [security|npm|...]
// --config|-c [*.json] # must be a file ending in .json
// $CMD
//   task[checkout|npm|grunt|run] $ARGS
//
// run NodeApplicationManager in the rootdir you want
//

var async = require('async');
var path = require('path');

var NodeApplicationManager = require('../').NodeApplicationManager;
var scaffold = new NodeApplicationManager();

scaffold.config = require('nconf').use('memory').argv().defaults({
   userconfig: path.join(process.env.HOME, '.namconf'),
   globalconfig: path.join(process.config.variables.node_prefix, '/etc/namconf'),
   task: {
      run: {
         user: 'nobody'
      }
   }
});
Object.keys(process.env).forEach(function (key) {
   var conf_pattern = /^nam_config_/;
   if (conf_pattern.test(key)) {
      scaffold.config.set(key.replace(conf_pattern, '').replace(/[^0-9A-Za-z]/,':'), process.env[key]);
   }
});
scaffold.config.add('userconfig', {type: 'file', file: scaffold.config.get('userconfig')});
scaffold.config.add('globalconfig', {type: 'file', file: scaffold.config.get('globalconfig')});

var chdir = scaffold.config.get('cwd') || scaffold.config.get('C');
if (scaffold.config.get('cwd')) {
   process.chdir(scaffold.config.get('cwd'));
}

var integrations = [].concat(scaffold.config.get('integrate'), scaffold.config.get('i')).filter(Boolean);
if (integrations) {
   var integrationsdir = path.join(__dirname, '..', 'integrations');
   integrations.forEach(function (integration) {
      scaffold.integrate(require(path.resolve(integrationsdir, integration)));
   });
}

function done(err) {
   if (err) {
      console.error(err.stack || err);
      process.exit(err.code || 1);
   }
}

var args = scaffold.config.get('_').map(String);
if (!args.length) {
   if (!process.stdin.isTTY) {
      var buffs = [];
      process.stdin.on('end', function () {
         var tasks = JSON.parse(buffs.join(''));
         runTasks(tasks);
      });
      process.stdin.on('data', buffs.push.bind(buffs));
      process.stdin.resume();
   }
   else {
      process.exit(0);
   }
}
else {
   if (!process.stdin.isTTY) {
      console.error('Cannot accept both CLI task and stdin tasks');
      process.exit(1);
   }
   runTasks([
      [args.shift(), args, null]
   ]);
}

function runTasks(tasks) {
   async.forEachSeries(tasks, function (taskDefinition, next) {
      var cmd = taskDefinition[0];
      var args = taskDefinition[1] || [];
      var options = taskDefinition[2] || null;
      scaffold.task(cmd, args, null, next);
   }, done);
}